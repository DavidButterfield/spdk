SPDK + DRBD + FUSE + TCMU-RUNNER HANDLERS -- David Butterfield -- Fri Sep 27 18:03:31 MDT 2019

	[Updated with information about the FUSE interface and the new bio_spdk module,
	 and to match revised example configurations and diagram]

Refer to diagram at:
https://raw.githubusercontent.com/DavidButterfield/spdk/tcmu-runner/spdk_drbd.pdf

tcmu-runner block storage handlers running under SPDK
=====================================================
A prototype of a new block device module "bdev_tcmur" running under the Storage Performance
Development Kit allows access to block storage using tcmu-runner handlers.  (tcmu-runner itself
is not involved; only its loadable handlers are used here.)  The bdev_tcmur module is based on
the bdev_aio module source.  It enables the pathway for LUN 2 shown in the diagram.

Distributed Replicated Block Device (DRBD 9.0) running in usermode
==================================================================
A recent project ported DRBD from the kernel to run in usermode as a Linux process, using
support from emulated kernel functions and a multi-threaded engine based on epoll_wait().  The
DRBD source code itself is unmodified, with its expected environment simulated around it.  It
receives requests from clients through the kernel's block-I/O ("bio") protocol, and also makes
requests to its backing storage using that same protocol.

DRBD running with SPDK
======================
To bring usermode DRBD into an SPDK process, a new SPDK bdev module "bdev_bio" implements
translation of SPDK block device requests into the kernel's "bio" protocol, as expected by DRBD.
This enables the pathways for LUNs 3-6 shown in the diagram.

DRBD then makes bio requests to its backing storage (which therefore must implement the bio
protocol).  This either can be bio_tcmur, to translate the bio calls into tcmu-runner calls, or
it can be the bio_spdk module, which translates bio calls into SPDK bdev calls.  An SPDK bdev
instance can then be configured behind the bio_spdk instance.  Examples are LUNs 4 and 6 shown
in the diagram, where instances of bdev_malloc are configured behind bio_spdk.

(The configurations for LUN 3 and LUN 4 would be silly in production, because they translate
SPDK-to-bio and bio-to-SPDK back-to-back, but are useful for performance comparisons with other
LUN configurations)

The emulated kernel functions (UMC - usermode compatibility) make use of services provided by a
multithreaded event engine (MTE) implemented around epoll_wait().  The MTE services are accessed
by UMC through an ops vector backed by MTE services for memory, time, and threads, as well as
event polling of file descriptors, timers, and a FIFO of work to be done ASAP.  I anticipate an
easy time converting the ops vector to point at a shim to SPDK services in place of MTE calls.

FUSE/bio interface
==================
The bio block devices within the usermode server are visible through a mount of the server's UMC
FUSE filesystem implementation.  Each device instance that implements the bio protocol (upward
for its clients) is given an entry in /UMCfuse/dev/.  The example configuration has this look:

$ ls -ld `find /UMCfuse`
dr-xr-xr-x 4 root root          3 Sep 26 12:12 /UMCfuse
dr-xr-xr-x 9 root root          8 Sep 26 12:13 /UMCfuse/dev
-rw-rw---- 1 root root 1073672192 Sep 26 12:13 /UMCfuse/dev/drbd2
-rw-rw---- 1 root root  134176768 Sep 26 12:13 /UMCfuse/dev/drbd3
-rw-rw---- 1 root root 1073741824 Sep 26 12:13 /UMCfuse/dev/file_b
-rw-rw---- 1 root root 1073741824 Sep 26 12:13 /UMCfuse/dev/file_c
-rw-rw---- 1 root root  134217728 Sep 26 12:13 /UMCfuse/dev/Malloc1
-rw-rw---- 1 root root  134217728 Sep 26 12:13 /UMCfuse/dev/Malloc2

Each file represents an entire bio device; the examples are sized 1GiB and 128MiB.  These files
can contain filesystems, e.g.:

    sudo mkfs.ext4 /UMCfuse/dev/drbd2
    sudo mount /UMCfuse/dev/drbd2 /mnt/x
    cd /mnt/x

Limitations
===========
The implementation is very new.  So far I have mainly tested it using the SPDK iSCSI server,
exporting tcmu-runner backend devices and replicated DRBD devices as SCSI LUNs.  That seems to
work reliably.  The drbd and tcmur devices can alternatively be mounted locally through the FUSE
interface, which also works.

DRBD is configured using its native configuration utilities.  Some SPDK+DRBD configurations
cannot be specified using SPDK .conf files; it is necessary to use JSON RPC in some cases.
See "Configuring" below for more details.

I have only tried it with one reactor core.

This prototype implementation is clearly in need of some cleaning up and interfaces straightened
out.  But it runs.

The makefiles have optimizations turned off and debugs turned on.

The fuse-tree node that represents a bio block device appears as a regular file rather than as a
block device because otherwise FUSE directs I/O for that dev_t to the kernel device driver
instead of to the FUSE filesystem server.

The UMC FUSE implementation is presently single-threaded and synchronous; thus it operates at an
effective queue depth of one.  This matters most when using it to write replicated volumes with
DRBD Protocol C, where performance will suffer significantly.  Writing volumes with Protocol A
configured to "pull-ahead" performs reasonably, as does writing the same data through an iSCSI
LUN, which does not have the QD=1 limitation,

NOTE: Only tcmu-runner modules handler_ram.so and handler_file.so have been tried so far; the
      latter is significantly faster, so it is the one specified in the example configuration
      files.  An *async* tcmu-runner handler (nr_threads == 0) has yet to be tried!

Usermode DRBD Limitations
=========================
Netlink multicast emulation not yet implemented, so anything like "drbdsetup wait*" hangs.

Messages from the utilities and in the logs have not been modified, so will still refer to "the
kernel" etc when referring to code that has been ported from the kernel to run in usermode.

Resync may run noticeably slower when observing resync network traffic with tcpdump.

Something I expect NOT to work is running the server executable off of a disk it implements.

I have only run the usermode server on machines without DRBD installed in the kernel.  The build
script and the config/run instructions assume that there are no DRBD modules or utilities
installed.  (That would likely be very confusing, but might actually work if assigned separate
ports)

Bugs
====
In general only the "happy path" has received any exercise -- expect bugs in untested error-
handling logic.

Error messages are often opaque or hopelessly off-context.  (See also "Troubleshooting" later)

"Exclusive" opens aren't really exclusive, so be careful not to mount the same storage twice;
for example /UMCfuse/dev/file_c and /UMCfuse/dev/drbd2 share the same underlying storage in the
example configuration.  For another, SPDK iSCSI [targetnode] configuration should never consume
bio_Malloc1 and Malloc1 concurrently.  "Holders" and "claims" are not yet implemented.

The "writable" bits in the mode permissions do not appear correctly in /UMCfuse/dev/drbd*.

The server apparently can mount and write a replicated DRBD device on a secondary node.

fsync/flush is probably ineffective.

4096 is the only tested block size; possible bugs with others.

Stacktrace is broken.

Probably there are broken untested refcountings on things that usually only get opened once.
(E.g. two concurrent dd commands to the same device or things like that).

Clean shutdown does not work at all.

The makefiles are hateworthy.  I always "make clean" before make, because my makefiles don't
calculate dependencies right.  SCST repository is unnecessarily tangled up with the build.

Sometimes DRBD resync doesn't start upon reconnect after restarting the server.  If it doesn't
start, disconnecting + reconnecting to the peer usually gets it going.

I have seen a very weird problem using the tcmu-runner handler_file.so.  After dlopen(),
libtcmur.c looks up the symbol for the handler_init routine and calls it.  The handler calls
back with the address of its ops vector.  The function addresses in the ops vector are properly
relocated for the loaded module, and the main module calls functions through the ops vector
thousands of times... and then suddenly SIGSEGV, and examining the ops vector (under gdb) the
function addresses are all back to their original UNRELOCATED relative values!  (And the
faulting program counter address matches the unrelocated value in the member of the ops vector
it was trying to call through.)  I have never seen this happen with handler_ram.

However, I have not seen the problem since I ensured adequate memory for the SPDK server.  The
SPDK test machine has "only" 4GiB RAM, and swap space used was increasing during problem tests.
Because handler_file runs significantly faster than handler_ram for mounted filesystems, all the
tcmu-runner handler devices in the example configuration presently use handler_file.

Building from Source Code
=========================
The source code to build SPDK with support for tcmu-runner handlers is in my forks of the SPDK
and tcmu-runner repositories. Building-in DRBD support requires several additional repositories.
Because building is presently a mess, I've included a script to download the repositories and
build SPDK with support for tcmu-runner loadable handlers and DRBD.  cd into an empty directory
and do:

    wget https://raw.githubusercontent.com/DavidButterfield/spdk/tcmu-runner/BUILD_spdk_drbd.sh
    chmod 755 BUILD_spdk_drbd.sh
    ./BUILD_spdk_drbd.sh

The script builds SPDK with support for both DRBD and tcmu-runner handlers (first line below).
You can reconfigure to omit DRBD support (which is an order of magnitude more complex than the
tcmu-runner support).  Or build a regular iSCSI server by omitting both of these options:

    --with-tcmur --with-drbd		# compile SPDK with DRBD and tcmu-runner support
    --with-tcmur			# compile SPDK with tcmu-runner support only

Comments in the download/build script document the process in case you want to do the steps
manually.  (It asks for the sudo password to install, so you might want to look at it first.)

The SCRIPT ASSUMES you already have the tools and libraries installed such that you can build
the standard SPDK, DRBD, and tcmu-runner repositories.  Some of the makefiles require various
build tools -- here are package names I added to a fresh installation of Ubuntu 18.04 LTS to
complete the build:
    build-essential g++ gcc make cmake autoconf automake flex coccinelle
    cscope exuberant-ctags git gdb valgrind
    libfuse-dev libaio-dev libglib2.0-dev libkmod-dev libnl-3-dev libssl-dev
    libnl-genl-3-dev libnuma-dev uuid-dev libcunit1-dev libpython-all-dev librbd-dev

I always "make clean" before "make", because my makefiles don't calculate dependencies right.

There should be no compile errors, but there will be some warnings during the usermode DRBD
compile.  The build script documents a few that are expected and can be ignored for now.

Configuring
===========
DRBD is configured using its native configuration utilities.  Some SPDK+DRBD configurations
cannot be specified using SPDK .conf files; it is necessary to use JSON RPC in some cases.
For example when an SPDK device depends on a DRBD instance, and the DRBD instance depends on
another SPDK device: the DRBD configuration utilities must run in the midst of the SPDK
configuration.

Using JSON RPC the SPDK configuration can be split into a phase occurring before the DRBD
configuration and another phase after.  That is what is done by these example configuration
scripts:
    etc/spdk/iscsi_drbd.conf.sh.in		# configure SPDK with DRBD devices
    etc/spdk/iscsi_drbd_tcmur.conf.sh.in	# configure SPDK with DRBD and tcmur devices

The example DRBD .res files in etc/drbd.d are from a node in my setup.  Both these and the
example SPDK config scripts must be modified to suit the names, IP addresses, etc in your
network environment.  This example puts the modified SPDK config scripts into ${DIR}:

    # Copy example DRBD resource configuration files to /etc/drbd.d
    cp etc/drbd/*.res /etc/drbd.d

    # Modify those copies to match your local names, IP addresses, etc.
    ...

    # Make copies of one or more desired SPDK configuration files from these provided:
    mkdir ${DIR}
    cp etc/spdk/iscsi_drbd_tcmur.conf.sh.in	${DIR}/iscsi_drbd_tcmur.conf.sh	# DRBD+TCMUR
    cp etc/spdk/iscsi_drbd.conf.sh.in		${DIR}/iscsi_drbd.conf.sh	# DRBD only
    cp etc/spdk/iscsi_tcmur.conf.in		${DIR}/iscsi_tcmur.conf		# TCMUR only

    # Modify the selected copies to match your local names, IP addresses, etc.
    ...

Running
=======
To run the DRBD management utilities so that they refer to the simulated /proc that talks to the
usermode server process (rather than the real /proc that talks to the kernel):

    export UMC_FS_ROOT=/UMCfuse			    # *** SET ENVIRONMENT ***

The utilities need the $UMC_FS_ROOT environment variable set to control the usermode DRBD server
instead of a kernel-based server.  But they also need to run superuser.  Keep in mind that the
sudo program does not pass your shell environment through to the program given on its command
line, unless you specify "sudo -E".  (Omitting the "-E" leads to bewildering non-sequitur error
messages because the utility tries to parse an earlier version of the command language)

Also the *server* needs the $UMC_FS_ROOT environment variable set, because it invokes the
utilities through a "usermode helper", and they inherit the variable from the server.

To run the full example configuration with DRBD devices and tcmu-runner devices:

    export UMC_FS_ROOT=/UMCfuse
    sudo -E app/iscsi_tgt/iscsi_tgt
    sudo ${DIR}/iscsi_drbd_tcmur.conf.sh    # in another window

Example DRBD/bdev_malloc configuration (LUNS 0, 4, and 6; no tcmu-runner devices):

    export UMC_FS_ROOT=/UMCfuse
    sudo -E app/iscsi_tgt/iscsi_tgt
    sudo ${DIR}/iscsi_drbd.conf.sh	    # in another window

Example tcmur-only configuration (LUNs 0, 1, and 2, no DRBD devices or MTE/UMC/bio support):

    export UMC_FS_ROOT=/UMCfuse
    sudo -E app/iscsi_tgt/iscsi_tgt -c ${DIR}/iscsi_tcmur.conf

Troubleshooting
===============
If you haven't read the sections "Configuring" and "Running" just above, read those.

Make sure your configuration files were suitably modified for your names, addresses, etc.
This includes the ones in /etc/drbd.d as well as the ones you specify at server startup.

Make sure you are running the server and the DRBD utilities with environment variable set:

    export UMC_FS_ROOT=/UMCfuse
    sudo -E drbdadm ...		# -E to pass the environment variable through sudo

Missing the environment variable leads to bewildering non-sequitur error messages because the
utility is trying to parse an earlier version of the command language.  These messages in the
server log or output from a DRBD utility probably mean the environment variable is not set:
    Cannot determine minor device number of device
    Missing connection endpoint argument
    Parse error: 'disk | device | address | meta-disk | flexible-meta-disk' expected,
	    but got 'node-id'

If you have trouble with the full configuration try the simpler ones.

After starting the server, /proc and /sys/module entries for the DRBD usermode server should be
observable under /UMCfuse.  Also, a node should appear in /UMCfuse/dev for each bio block device
configured.

Multiple names can refer to the same underlying storage.  Referring to the diagram, LUN 5,
bio_drbd2, /UMCfuse/dev/drbd2, and /UMCfuse/dev/file_c all refer to the same underlying storage
in /tmp/tcmur_file02.  A filesystem can be mounted on an iSCSI initiator as LUN 5, or the same
filesystem can be mounted locally through FUSE (see lower diagram on the PDF page), e.g.

    sudo mount /UMCfuse/dev/drbd2 /mnt/x

NOTE: One bug is that exclusive open is not currently exclusive, so be careful not to use
      storage multiple ways at the same time!

Notice that /UMCfuse/dev/drbd2 is slightly smaller than /UMCfuse/dev/file_c, and likewise
/UMCfuse/dev/drbd3 is slightly smaller than /UMCfuse/dev/Malloc2.  The file_c and Malloc2
devices represent the entire storage space, whereas the drbd devices represent what is available
to a filesystem after subtracting space taken (at the end of the device) by DRBD metadata.

If the drbd3 device is to be used as a filesystem, then the mkfs must be done on the drbd3
device, not on the Malloc2 device.  This is so mkfs will use the correct device size.  After
that it will be possible to mount and observe the filesystem on either drbd3 or Malloc2; but
modifying it when mounted on Malloc2 will leave drbd3 with incorrect metadata.  (Likewise file_c
and drbd2).

On the other hand, LUN6 and /UMCfuse/dev/drbd3 both serve the same data, and the data can be
accessed alternately (not concurrently) via either path (through an initiator as LUN 6, or
through the /UMCfuse/dev/drbd3 node).

More Information
================
The DRBD kernel source code ported to usermode is (within a dozen lines of) unmodified from the
original code in the LINBIT repository, with its expected kernel environment simulated around
it.  This built on earlier work porting the SCST SCSI server to usermode.  The README.md with
diagrams at https://github.com/DavidButterfield/SCST-Usermode-Adaptation explains how that was
done.
