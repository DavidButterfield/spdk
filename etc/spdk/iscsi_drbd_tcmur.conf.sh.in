#!/bin/bash
#
# iscsi_drbd_tcmur.conf.sh.in creates a configuration with bdev_malloc and
# tcmu-runner handlers backing DRBD (Distributed Replicated Block Device)
# running under SPDK in usermode.

# NOTE: This file must be customized for your names, addresses, etc before use!
HOST=192.168.1.23
MASK=192.168.1.0/24
NAME=iqn.2016-06.io.spdk:disk1

# DRBD uses the kernel's block-I/O (bio) protocol to communicate both upward
# (toward clients) and downward (toward storage).
#
# The bdev_bio module translates SPDK bdev requests into bio bdev requests.
# The bio_spdk module translates bio requests into SPDK bdev requests.
#
# This script creates a configuration with LUNs and {modules} configured thus:
# LUN SPDKname                 BIOname         BIOname             SPDKname TCMURname          Backing File
# --- --------                 -------         -------             -------- ---------          ------------
#  0  Malloc0     {bdev_malloc}
#  1  AIO0        {bdev_aio}                                                                   /tmp/myfile
#  2  file_a      {bdev_tcmur}                                              file_a  {libtcmur} /tmp/tcmur_file00
#  3  bio_file_b  {bdev_bio}                   file_b   {bio_tcmur}         file_b  {libtcmur} /tmp/tcmur_file01
#  4  bio_Malloc1 {bdev_bio}                   Malloc1  {bio_spdk}  Malloc1
#  5  bio_drbd2   {bdev_bio}    drbd2  {DRBD}  file_c   {bio_tcmur}         file_c  {libtcmur} /tmp/tcmur_file02
#  6  bio_drbd3   {bdev_bio}    drbd3  {DRBD}  Malloc2  {bio_spdk}  Malloc2
#
# This configuration can only be made through JSON RPC.  It is not possible to
# create using the SPDK conf files because DRBD has to be configured (using its
# native configuration utility programs) partway through the SPDK configuration,
# after the Malloc devices it depends on are created, but before creation of
# the iSCSI LUNs that depend on it.

rootdir=$(readlink -f $(dirname $0))/../..

set -x

# First configure everything that doesn't depend on DRBD
sudo ${rootdir}/scripts/rpc.py load_config << //EOF//
{
  "subsystems": [
    {
      "subsystem": "bdev",
      "config": [
        {
          "method": "set_bdev_options",
          "params": {
            "bdev_io_pool_size": 65535,
            "bdev_io_cache_size": 256
          }
        },
        {
          "method": "bdev_malloc_create",
          "params": {
            "name": "Malloc0",
            "num_blocks": 32768,
            "block_size": 4096
          }
        },
        {
          "method": "bdev_malloc_create",
          "params": {
            "name": "Malloc1",
            "num_blocks": 32768,
            "block_size": 4096
          }
        },
        {
          "method": "bdev_malloc_create",
          "params": {
            "name": "Malloc2",
            "num_blocks": 32768,
            "block_size": 4096
          }
        },
        {
          "method": "bdev_aio_create",
          "params": {
            "name": "AIO0",
            "block_size": 4096,
            "filename": "/tmp/myfile"
          }
        },
        {
          "method": "bdev_tcmur_create",
          "params": {
            "minor": 1,
            "name": "file_a",
            "cfgstr": "/file//tmp/tcmur_file00"
          }
        },
        {
          "method": "bdev_tcmur_create",
          "params": {
            "minor": 2,
            "name": "file_b",
            "cfgstr": "/file//tmp/tcmur_file01"
          }
        },
        {
          "method": "bdev_tcmur_create",
          "params": {
            "minor": 3,
            "name": "file_c",
            "cfgstr": "/file//tmp/tcmur_file02"
          }
        }
      ]
    }
  ]
}
//EOF//

# Make SPDK bdevs accessible to bio-protocol clients
sudo ${rootdir}/scripts/rpc.py load_config << //EOF//
{
  "subsystems": [
    {
      "subsystem": "bdev",
      "config": [
        {
          "method": "bio_spdk_create",
          "params": {
            "name": "Malloc1"
          }
        },
        {
          "method": "bio_spdk_create",
          "params": {
            "name": "Malloc2"
          }
        }
      ]
    }
  ]
}
//EOF//

sleep 1         # Give SPDK config a little time to settle

# Configure DRBD devices
export UMC_FS_ROOT=/UMCfuse

        # From /etc/drbd.d/spdk_drbd2.res:
        #   device              drbd2 minor 2;
        #   disk                "/UMCfuse/dev/file_c";
drbdadm create-md spdk_drbd2 --force #XXX
drbdadm up spdk_drbd2
drbdsetup primary spdk_drbd2 --force

        # From /etc/drbd.d/spdk_drbd3.res:
        #   device              drbd3 minor 3;
        #   disk                "/UMCfuse/dev/Malloc2";
drbdadm create-md spdk_drbd3 --force
drbdadm up spdk_drbd3
drbdsetup primary spdk_drbd3 --force

# Make bio bdevs accessible to SPDK clients
sudo ${rootdir}/scripts/rpc.py load_config << //EOF//
{
  "subsystems": [
    {
      "subsystem": "bdev",
      "config": [
        {
          "method": "bdev_bio_create",
          "params": {
            "name": "bio_file_b",
            "filename": "/UMCfuse/dev/file_b"
          }
        },
        {
          "method": "bdev_bio_create",
          "params": {
            "name": "bio_Malloc1",
            "filename": "/UMCfuse/dev/Malloc1"
          }
        },
        {
          "method": "bdev_bio_create",
          "params": {
            "name": "bio_drbd2",
            "filename": "/UMCfuse/dev/drbd2"
          }
        },
        {
          "method": "bdev_bio_create",
          "params": {
            "name": "bio_drbd3",
            "filename": "/UMCfuse/dev/drbd3"
          }
        }
      ]
    }
  ]
}
//EOF//

# Configure SPDK devices that depend on DRBD devices
sudo ${rootdir}/scripts/rpc.py load_config << //EOF//
{
  "subsystems": [
    {
      "subsystem": "iscsi",
      "config": [
        {
          "method": "add_portal_group",
          "params": {
            "tag": 1,
            "portals": [
              {
                "host": "${HOST}",
                "port": "3260"
              }
            ]
          }
        },
        {
          "method": "add_initiator_group",
          "params": {
            "tag": 1,
            "initiators": [
              "ANY"
            ],
            "netmasks": [
              "${MASK}"
            ]
          }
        },
        {
          "method": "construct_target_node",
          "params": {
            "name": "${NAME}",
            "alias_name": "Data Disk1",
            "pg_ig_maps": [
              {
                "pg_tag": 1,
                "ig_tag": 1
              }
            ],
            "luns": [
              {
                "bdev_name": "Malloc0",
                "lun_id": 0
              },
              {
                "bdev_name": "AIO0",
                "lun_id": 1
              },
              {
                "bdev_name": "file_a",
                "lun_id": 2
              },
              {
                "bdev_name": "bio_file_b",
                "lun_id": 3
              },
              {
                "bdev_name": "bio_Malloc1",
                "lun_id": 4
              },
              {
                "bdev_name": "bio_drbd2",
                "lun_id": 5
              },
              {
                "bdev_name": "bio_drbd3",
                "lun_id": 6
              }
            ],
            "queue_depth": 64
          }
        }
      ]
    }
  ]
}
//EOF//
